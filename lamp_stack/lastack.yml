AWSTemplateFormatVersion: "2010-09-09"
Description: Create a LAMP stack with CF
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a valid KeyName 
  DBName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z-0-9]*"
    ConstraintDescription: Only uppercase/lowercase letters and number are allowed. Must begin with a letter
    MinLength: 8
    MaxLength: 64
  DBUser:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z-0-9]*"
    ConstraintDescription: Only uppercase/lowercase letters and number are allowed. Must begin with a letter
    MinLength: 8
    MaxLength: 64
  DBPassword:
    NoEcho: true
    Type: String
    AllowedPattern: "[a-zA-Z-0-9]*"
    ConstraintDescription: Only uppercase/lowercase letters and number are allowed. Must begin with a letter
    MinLength: 8
    MaxLength: 64
  DBRootPassword:
    NoEcho: true
    Type: String
    AllowedPattern: "[a-zA-Z-0-9]*"
    ConstraintDescription: Only uppercase/lowercase letters and number are allowed. Must begin with a letter
    MinLength: 8
    MaxLength: 64
  InstanceType:
    Type: String
    AllowedValues: [t2.nano,t2.micro,t2.small,t2.medium]
    ConstraintDescription: Invalid instance type
  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: invalid SSH cidr address
Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-6869aa05
    us-west-2:
      HVM64: ami-7172b611
Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - "Install"
          - "Configure"
        Install:
          packages:
            yum:
              mysql: []
              mysql-server: []
              mysql-libs: []
              httpd: []
              php: []
              php-mysql: []
              git: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <h1>Welcome to the AWS CloudFormation PHP Script!</h1>
                <h2>Now it should work</h2>
                <?php print(date('Y-m-d'));\n ?>
                <p/>
                <?php 
                $Database= "localhost";
                $DBUser = "${DBUser}";
                $DBPassword = "${DBPassword}";
                $dbconnection = mysql_connect($Database, $DBUser, $DBPassword) or die ("Could not connect");
                print("Connected to database sucessfully");
                mysql_close($dbconnection);?>
              mode: "000600"
              owner: apache
              group: apache
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE ${DBName};
                CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
                GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';
                FLUSH PRIVILEGES;
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: root 
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              mysqld:
                enabled: true
                ensureRunning: true
              httpd:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hoooks.d/cfn-auto-reloader.conf"
        Configure:
          commands:
            01_set_mysql_root_password:
              command: !Sub |
                mysqladmin -u root password ${DBRootPassword}
              test: !Sub |
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (($? != 0))
            02_create_database:
              command: !Sub |
                mysql -u root --password='${DBRootPassword}' </tmp/setup.mysql
              test: !Sub | 
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (($? != 0))
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [AWSInstanceType2Arch, !Ref "InstanceType", Arch]]
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP/SSH access"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
Outputs:
  WebsiteURL:
    Description: URL For the LAMP stack
    Value: !Join
    - ''
    - -  http://
      -  !GetAtt WebServerInstance.PublicDnsName