# This template creates a basic Windows EC2 instance.
---
AWSTemplateFormatVersion: "2010-09-09"
Description: Provision an EC2 Windows instance
Parameters:
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
  
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: The instance AMI
  
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: The instance Subnet
  
  VPC: 
    Description: Select VPC
    Type: AWS::EC2::VPC::Id
  
  Environment:
    Type: String

  Project:
    Type: String

  VPCCidr:
    Type: String
    Description: VPC CIDR
  
  KmsKeyID:
    Type: String
    Description: The KMS key ID for encryption
  
  AdminPassword: 
    Type: AWS::SSM::Parameter::Value<String>
    Description: Admin password for Windows Instance
    NoEcho: true
  
  SSMKmsKeyArn:
    Type: String
    Description: KMS key used to encrypt the SSM connection
  
Resources:

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config:
          - CFNsetup
          - timezone
          - installRole
          - disableIESecurityOption
          - activateWCF
          - restartServer
          - setupAdminPassword
          - configureCWAgent
          - finalize
        CFNsetup:
          files:
            c:\cfn\cfn-hup.conf:
              content:
                !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                  action=cfn-init.exe -v -s ${AWS::StackId}  -r LaunchTemplate --region ${AWS::Region}
        timezone:
          commands:
            #Setup the right timezone
            a-execute-powershell-script-SetTimezone:
              command: powershell.exe -Command Set-TimeZone -Id "'W. Europe Standard Time'"
              waitAfterCompletion: '0'
        installRole:
          commands:
            #Install IIS web server
            a-install-role:
              command: powershell.exe -Command Install-WindowsFeature -Name Web-Server -IncludeManagementTools;
              waitAfterCompletion: '0'
            #Install web server plugins 
            b-install-role:
              command: |
                powershell.exe -Command Install-WindowsFeature -Name Web-Log-Libraries, Web-Request-Monitor, Web-Net-Ext, Web-Asp-Net, Web-ISAPI-Ext, Web-ISAPI-Filter, NET-Framework-Features, NET-HTTP-Activation, NET-Non-HTTP-Activ;
              waitAfterCompletion: '0'
            #Install telnet client
            c-install-role:
              command: powershell.exe -Command Install-WindowsFeature -Name Telnet-Client;
              waitAfterCompletion: '0'
            #Reboot server
            d-restart:
              command: powershell.exe -Command Restart-Computer -Force
              waitAfterCompletion: forever
        disableIESecurityOption:
          files:
            #Disable Intenret explorer enhanced security configuration
            c:\AutomationScripts\disableIESecurity.ps1:
              content: |
                $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
                $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
                Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
                Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
          commands:
            a-disable-ie-security-script:
              command: powershell.exe c:\AutomationScripts\disableIESecurity.ps1
              waitAfterCompletion: '30'
        activateWCF:
          files:
            c:\AutomationScripts\activateWCF.ps1:
              content: |
                # Allows to run a PowerShell command without restrictions
                Set-ExecutionPolicy Bypass -Force

                # Enable HTTP Activation feature
                Install-WindowsFeature -Name NET-WCF-HTTP-Activation45
          commands:
            a-activate-wcf:
              command: powershell.exe c:\AutomationScripts\activateWCF.ps1
              waitAfterCompletion: '30'
        restartServer:
          commands:
            a-restart:
              command: powershell.exe -Command Restart-Computer -Force
              waitAfterCompletion: forever
        #Setup a new static Administrator password
        setupAdminPassword:
          files:
            c:\AutomationScripts\changePassword.ps1:
              content: !Sub |
                net user Administrator '${AdminPassword}'
          commands:
            change-password:
              command: | 
                powershell.exe -ExecutionPolicy Bypass -Command c:\AutomationScripts\changePassword.ps1
              waitAfterCompletion: '10'
        #Setup cloudwatch agent
        configureCWAgent:
          files:
            c:\AutomationScripts\cwagent.json:
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "logfile": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "namespace": "${Project}-${Environment}",
                    "metrics_collected": {
                      "LogicalDisk": {
                        "measurement": [
                          {"name": "% Idle Time", "unit": "Percent"},
                          {"name": "% Disk Read Time", "rename": "DISK_READ"},
                          "% Disk Write Time"
                        ],
                        "resources": [
                          "*"
                        ]
                      },
                      "Memory": {
                        "metrics_collection_interval": 5,
                        "measurement": [
                          "Available Bytes",
                          "Cache Faults/sec",
                          "Page Faults/sec",
                          "Pages/sec"
                        ]
                      },
                      "System": {
                        "measurement": [
                          "Context Switches/sec",
                          "System Calls/sec",
                          "Processor Queue Length"
                        ]
                      }
                    },
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}",
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]]
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                            "log_group_name": "${Project}-${Environment}/amazon-cloudwatch-agent.log",
                            "timezone": "UTC"
                          }
                        ]
                      },
                      "windows_events": {
                        "collect_list": [
                          {
                            "event_name": "System",
                            "event_levels": [
                              "INFORMATION",
                              "ERROR"
                            ],
                            "log_group_name": "${Project}-${Environment}/System",
                            "log_stream_name": "System",
                            "event_format": "xml"
                          }
                        ]
                      }
                    }
                  }
                }
            c:\AutomationScripts\activateAgent.ps1:
              content: |
                & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c file:c:\AutomationScripts\cwagent.json
          commands:
            downloadAgent:
              command: |
                powershell.exe -Command Invoke-WebRequest -Uri https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -UseBasicParsing -OutFile C:\Users\Administrator\Downloads\amazon-cloudwatch-agent.msi
            installAgent:
              command: |
                powershell.exe msiexec /i C:\Users\Administrator\Downloads\amazon-cloudwatch-agent.msi
            startAgent:
              command: |
                powershell.exe -ExecutionPolicy Bypass -Command c:\AutomationScripts\activateAgent.ps1
        finalize:
          commands:
            z-signal-success:
              command: !Sub |
                cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource Server --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      LaunchTemplateName: !Sub ${Project}-${Environment}-windows-template
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile: 
          Name: !Ref IamInstanceProfile
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
            Encrypted: true
            KmsKeyId: !Ref KmsKeyID
            VolumeType: gp3
        UserData:
          Fn::Base64: !Sub |
              <script>
              cfn-init.exe -v -s ${AWS::StackId} -r LaunchTemplate --region ${AWS::Region} --configsets config
              </script>
        SecurityGroupIds:
        - Ref: InstanceSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: !Sub ${Project}-${Environment}-windows
          - Key: Environment
            Value: !Ref Environment
          - Key: Backup
            Value: "true"
          - Key: Project
            Value: !Ref Project
        - ResourceType: volume
          Tags:
          - Key: Name
            Value: !Sub ${Project}-${Environment}-windows-vol
          - Key: Environment
            Value: !Ref Environment
          - Key: Backup
            Value: "true"
          - Key: Project
            Value: !Ref Project

  Server:
    Type: AWS::EC2::Instance
    CreationPolicy:
       ResourceSignal:
        Timeout: PT35M
    Properties:
      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      SubnetId: !Ref Subnet

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref Role
  
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: custom-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogStream
            Resource: "*"
          - Effect: Allow
            Action:
            - kms:ListKeys
            - kms:Decrypt
            - kms:Encrypt
            - kms:ListAliases
            - kms:DescribeKey
            Resource:
            - !Ref SSMKmsKeyArn

  
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Initial VPC enabled
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0