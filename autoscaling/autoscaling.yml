AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  RegionVPC:
    Description: The ID of the VPC where the autoscaling group will be created
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The ID Of the first subnet
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The ID Of the second subnet
  Subnet3:
    Type: AWS::EC2::Subnet::Id
    Description: The ID Of the third subnet
  InstanceType:
    Type: String
    Default: t3.micro
    Description: ASG instance type
  KmsKeyArn:
    Type: String
    Description: ARN for the KMS key used to encrypt the ebs volumes
  Environment:
    Type: String
    Description: Application environment
    Default: noprd
  Project:
    Type: String
    Description: Project name
    Default: multiprp-app

Mappings:
  AMI2Region:
    us-east-1:
      "1": ami-55ef662f
    us-west-1:
      "1": ami-a51f27c5

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
        - Action: sts:AssumeRole
          Principal:
            Service:
            - ec2.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  RolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: iam-role-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - dynamodb:*Item
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:PutItem
          Effect: Allow
          Resource:
          - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - kms:Decrypt
            - kms:GenerateDataKey
            - kms:Encrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:CreateGrant
          Resource:
            - !Ref KmsKeyArn
      Roles: 
        - !Ref InstanceRole

  ASGInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
      InstanceProfileName: DynamoCWRole

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for the Application Load Balancer
      VpcId: !Ref RegionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb-sg
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
  
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG fro the EC2 in the ASG
      VpcId: !Ref RegionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2--sg
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project

  ApplicationLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ApplicationLB
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref Project

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AppHealthCheck
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: "/"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref RegionVPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLB
      Port: 80
      Protocol: HTTP

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: "Image"
      SSESpecification:
        KMSMasterKeyId: !!Ref KmsKeyArn
        SSEType: KMS
        SSEEnabled: true
      AttributeDefinitions:
      - AttributeName: "ImageId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "ImageId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref Project
  
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Environment}-${Project}-launchtemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeType: "gp3"
              DeleteOnTermination: "true"
              VolumeSize: 20
              Encrypted: true
              KmsKeyId: !Ref KmsKeyArn
        DisableApiTermination: false
        EbsOptimized: false
        ImageId: !FindInMap ["AMI2Region", !Ref "AWS::Region", "1"]
        InstanceInitiatedShutdownBehavior: stop
        IamInstanceProfile: 
            Arn: !GetAtt ASGInstanceProfile.Arn
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
        - !Ref ASGSecurityGroup
        TagSpecifications:
        - ResourceType: volume
          Tags:
          - Key: Environment
            Value: !Ref Environment
          - Key: Name
            Value: !Sub ${Environment}-${Project}-ebs-vol
          - Key: Project
            Value: !Ref Project
        - ResourceType: instance
          Tags:
          - Key: Environment
            Value: !Ref Environment
          - Key: Name
            Value: !Sub ${Environment}-${Project}-ebs-vol
          - Key: Project
            Value: !Ref Project
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WPLaunchConfiguration --configsets appInstall
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource WPAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          appInstall:
          - "install_cfn"
          - "configure_dynamodb"
          - "install_php"
          - "configure_cw_agent"
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WPLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WPLaunchConfiguration --configsets appInstall
                runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cf-auto-reloader.conf"
        configure_dynamodb:
          files:
            /tmp/item.json:
              content: |
                {
                  "Image":{"S":"test.png"},
                  "Dimension":{"S":"500"},
                  "ImageId":{"S":"aaaaabbbbccccddddeee"}
                }
              mode: "000644"
              owner: root
              group: root
          commands:
            01_configure_dynamo_db:
              command: !Sub |
                aws dynamodb put-item --table-name ${DynamoDBTable} --item file:///tmp/item.json --region ${AWS::Region}
        install_php:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: |
                <?php echo "<h1>Cloudformation Sample application</h1>"?>
              mode: "000644"
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
        configure_cw_agent:
          packages:
            yum:
              awslogs: []
          files:
            /tmp/file_to_log:
              content: |
                [/var/log/httpd/error_log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/httpd/error_log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/httpd/error_log
                [/var/log/httpd/access_log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/httpd/access_log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/httpd/access_log
              mode: "000600"
              group: root
              owner: root
          commands:
            02_enable_logging:
              command: "cat /tmp/file_to_log >> /etc/awslogs/awslogs.conf"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
  
  WPAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        PauseTime: "PT15M"
        WaitOnResourceSignals: true
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
    Properties:
      VPCZoneIdentifier: 
      - !Ref Subnet1
      - !Ref Subnet2
      - !Ref Subnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      Cooldown: 60
      TargetGroupARNs:
      - !Ref ALBTargetGroup
      Tags:
      - Key: Environment
        Value: !Ref Environment
        PropagateAtLaunch: true
      - Key: Name
        Value: !Sub ${Environment}-${Project}-asg
        PropagateAtLaunch: true
      - Key: Project
        Value: !Ref Project
        PropagateAtLaunch: true


Outputs:
  ALBUrl:
    Value: !Sub "http://${ApplicationLB.DNSName}"
